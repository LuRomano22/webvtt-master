//
// Copyright (c) 2013 Mozilla Foundation and Contributors
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//  - Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//  - Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __WEBVTTXX_ERROR__
# define __WEBVTTXX_ERROR__
# include "base"
# include <webvtt/error.h>

namespace WebVTT
{

class Error
{
public:
  /**
   * Copy constructor
   */
  Error( const Error &other )
    : _line( other._line ),
      _column( other._column ),
      _error( other._error ),
      _message( other._message ) {
  }
  Error &operator=( const Error &other ) {
    *this = Error(other);
    return *this;
  }

  Error( uint line, uint column, webvtt_error error )
    : _line(line), _column(column), _error(error),
      _message( webvtt_strerror(error) ) {
  }

  ~Error() { }

  inline uint line() const { return _line; }
  inline uint column() const { return _column; }
  inline ::webvtt_error error() const { return _error; }
  inline const char *message() const { return _message; }

private:
  const uint _line;
  const uint _column;
  const ::webvtt_error _error;
  const char *_message;
};

}

#endif
